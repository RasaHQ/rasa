# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from api_v3 import query_service_pb2 as api__v3_dot_query__service__pb2


class QueryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrace = channel.unary_stream(
            "/jaeger.api_v3.QueryService/GetTrace",
            request_serializer=api__v3_dot_query__service__pb2.GetTraceRequest.SerializeToString,
            response_deserializer=api__v3_dot_query__service__pb2.SpansResponseChunk.FromString,
        )
        self.FindTraces = channel.unary_stream(
            "/jaeger.api_v3.QueryService/FindTraces",
            request_serializer=api__v3_dot_query__service__pb2.FindTracesRequest.SerializeToString,
            response_deserializer=api__v3_dot_query__service__pb2.SpansResponseChunk.FromString,
        )
        self.GetServices = channel.unary_unary(
            "/jaeger.api_v3.QueryService/GetServices",
            request_serializer=api__v3_dot_query__service__pb2.GetServicesRequest.SerializeToString,
            response_deserializer=api__v3_dot_query__service__pb2.GetServicesResponse.FromString,
        )
        self.GetOperations = channel.unary_unary(
            "/jaeger.api_v3.QueryService/GetOperations",
            request_serializer=api__v3_dot_query__service__pb2.GetOperationsRequest.SerializeToString,
            response_deserializer=api__v3_dot_query__service__pb2.GetOperationsResponse.FromString,
        )


class QueryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTrace(self, request, context):
        """GetTrace returns a single trace.
        Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
        It means that the JSON response cannot be directly unmarshalled using JSONPb.
        This can be fixed by first parsing into user-defined envelope with standard JSON library
        or string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def FindTraces(self, request, context):
        """FindTraces searches for traces.
        See GetTrace for JSON unmarshalling.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetServices(self, request, context):
        """GetServices returns service names."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetOperations(self, request, context):
        """GetOperations returns operation names."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetTrace": grpc.unary_stream_rpc_method_handler(
            servicer.GetTrace,
            request_deserializer=api__v3_dot_query__service__pb2.GetTraceRequest.FromString,
            response_serializer=api__v3_dot_query__service__pb2.SpansResponseChunk.SerializeToString,
        ),
        "FindTraces": grpc.unary_stream_rpc_method_handler(
            servicer.FindTraces,
            request_deserializer=api__v3_dot_query__service__pb2.FindTracesRequest.FromString,
            response_serializer=api__v3_dot_query__service__pb2.SpansResponseChunk.SerializeToString,
        ),
        "GetServices": grpc.unary_unary_rpc_method_handler(
            servicer.GetServices,
            request_deserializer=api__v3_dot_query__service__pb2.GetServicesRequest.FromString,
            response_serializer=api__v3_dot_query__service__pb2.GetServicesResponse.SerializeToString,
        ),
        "GetOperations": grpc.unary_unary_rpc_method_handler(
            servicer.GetOperations,
            request_deserializer=api__v3_dot_query__service__pb2.GetOperationsRequest.FromString,
            response_serializer=api__v3_dot_query__service__pb2.GetOperationsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "jaeger.api_v3.QueryService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTrace(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/jaeger.api_v3.QueryService/GetTrace",
            api__v3_dot_query__service__pb2.GetTraceRequest.SerializeToString,
            api__v3_dot_query__service__pb2.SpansResponseChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def FindTraces(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/jaeger.api_v3.QueryService/FindTraces",
            api__v3_dot_query__service__pb2.FindTracesRequest.SerializeToString,
            api__v3_dot_query__service__pb2.SpansResponseChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetServices(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jaeger.api_v3.QueryService/GetServices",
            api__v3_dot_query__service__pb2.GetServicesRequest.SerializeToString,
            api__v3_dot_query__service__pb2.GetServicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetOperations(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/jaeger.api_v3.QueryService/GetOperations",
            api__v3_dot_query__service__pb2.GetOperationsRequest.SerializeToString,
            api__v3_dot_query__service__pb2.GetOperationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
