name: Release workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

env:
    GITHUB_TOKEN: ${{ secrets.RASABOT_GITHUB_TOKEN }}

jobs:
  prepare-release:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0

      - name: Minor Release Check
        id: minor_release
        run: |
          version=${{ github.event.inputs.version }}
          
          # Check if version is in format number.number.number
          if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. It should be in format 'number.number.number'."
            exit 1
          fi

          # Extract the third number
          IFS='.' read -r -a version_parts <<< "$version"
          third_number="${version_parts[2]}"

          # Check if it's a minor release
          if [ "$third_number" -eq 0 ]; then
            echo "Minor release detected."
            echo "is_minor=true" >> $GITHUB_ENV
          else
            echo "Not a minor release. Skipping branch creation."
            echo "is_minor=false" >> $GITHUB_ENV
          fi

      - name: Create and Push New Release Branch
        if: env.is_minor == 'true'
        run: |
          version=${{ github.event.inputs.version }}
          IFS='.' read -r -a version_parts <<< "$version"
          release_branch="${version_parts[0]}.${version_parts[1]}.x"

          git fetch origin
          git checkout origin/main
          git checkout -b $release_branch
          git push origin $release_branch

      - name: Check-out Release Branch
        run: |
          version=${{ github.event.inputs.version }}
          IFS='.' read -r -a version_parts <<< "$version"
          release_branch="${version_parts[0]}.${version_parts[1]}.x"
          
          git checkout $release_branch
          git branch

      - name: Check Rasa SDK Version
        id: check_rasa_sdk_version
        run: |
          version=${{ github.event.inputs.version }}
          IFS='.' read -r -a version_parts <<< "$version"

          # Extract the first two digits of the input version
          input_major_minor="${version_parts[0]}.${version_parts[1]}"

          # Extract the first two digits of the rasa-sdk version from pyproject.toml
          poetry_version=$(awk -F'"' '/\[tool.poetry.dependencies.rasa-sdk\]/{flag=1;next}/\[/{flag=0}flag && /version/ {split($2, ver_parts, "."); print ver_parts[1]"."ver_parts[2]}' pyproject.toml)

          # Compare the first two digits of the input version and the poetry version
          if [ "$input_major_minor" != "$poetry_version" ]; then
            echo "Version mismatch: Input version ($input_major_minor) does not match rasa-sdk version ($poetry_version) in pyproject.toml."
            echo "update_required=true" >> $GITHUB_ENV
          else
            echo "Version match: Input version ($input_major_minor) matches rasa-sdk ($poetry_version) version in pyproject.toml."
            echo "update_required=false" >> $GITHUB_ENV
          fi
      
      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} 🐍
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry 🦄
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}
      
      - name: Update Rasa SDK Version
        if: env.update_required == 'true'
        run: |
          version=${{ github.event.inputs.version }}
          IFS='.' read -r -a version_parts <<< "$version"

          # Extract the first two digits of the input version
          input_major_minor="${version_parts[0]}.${version_parts[1]}"

          # Update the rasa-sdk version in pyproject.toml
          awk -v new_version="$input_major_minor.0" 'BEGIN{flag=0} /\[tool.poetry.dependencies.rasa-sdk\]/{flag=1} flag && /version/{$0="version = \"" new_version "\""} 1' pyproject.toml > pyproject.tmp && mv pyproject.tmp pyproject.toml

          cat pyproject.toml

          # Run poetry update to regenerate poetry.lock
          poetry update

          # Commit the changes
          git config user.name "rasabot"
          git config user.email "rasabot@rasa.com"
          git add pyproject.toml poetry.lock
          git commit -m "bump rasa-sdk dependency"
      
    #   - name: Prepare the release
    #     run: poetry run python scripts/release.py prepare --next_version ${{ github.event.inputs.version }}