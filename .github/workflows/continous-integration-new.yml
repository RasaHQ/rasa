name: Continuous Integration New

on:
  push:
    branches:
      - main
      - ATO-2272
  pull_request:
    branches:
        - main
        - 3.7.x
        # Skip any PR created by dependabot to avoid permission issues
        - '!dependabot/**'

env:
  AWS_REGION: us-east-1
  REPOSITORY: 329710836760.dkr.ecr.us-east-1.amazonaws.com/rasa-private-dev
  DEFAULT_PYTHON_VERSION: "3.10"
  
permissions:
  checks: write
  id-token: write
  pull-requests: write
  contents: read
  
jobs:
  rasa-private-dev-docker-image:
        name: rasa-private dev docker image
        runs-on: ubuntu-22.04
    
        steps:
          - name: Check out code
            uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
    
          - name: Read Poetry Version üî¢
            run: |
              echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
            shell: bash
    
          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v3.0.1
            with:
              role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
              aws-region: ${{ env.AWS_REGION }}
    
          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
            with:
              mask-password: "true"
    
          # Tag in format: pr_number-shortSHA or branch_name-shortSHA
          - name: Set image tag
            run: |
              if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
                echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
              else
              echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
              fi
    
          - name: Build base image
            run: |
              docker build . -t rasa-private:base-localdev -f docker/Dockerfile.base --platform=linux/amd64
          
          - name: Build base poetry image
            run: |
              docker build . -t rasa-private:base-poetry-localdev -f docker/Dockerfile.base-poetry --build-arg IMAGE_BASE_NAME=rasa-private --build-arg BASE_IMAGE_HASH=localdev --build-arg POETRY_VERSION=$POETRY_VERSION --platform=linux/amd64
            env:
              POETRY_VERSION: ${{ env.POETRY_VERSION }}
    
          - name: Build base builder image
            run: |
              docker build . -t rasa-private:base-builder-localdev -f docker/Dockerfile.base-builder --build-arg IMAGE_BASE_NAME=rasa-private --build-arg POETRY_VERSION=localdev --platform=linux/amd64
    
          - name: Build, tag, and push image to Amazon ECR
            env:
              IMAGE_TAG: ${{ env.IMAGE_TAG }}
            run: |
              docker build . -t $IMAGE_TAG -f Dockerfile --build-arg IMAGE_BASE_NAME=rasa-private --build-arg BASE_IMAGE_HASH=localdev --build-arg BASE_BUILDER_IMAGE_HASH=localdev --platform=linux/amd64
              docker tag $IMAGE_TAG $REPOSITORY:$IMAGE_TAG
              docker push $REPOSITORY:$IMAGE_TAG

  tracing-integration-test:
    name: Tracing Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

        # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
            AWS_REGION: ${{ env.AWS_REGION }}
            AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
            REPOSITORY: ${{ env.REPOSITORY }}
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}
            
      - name: Build action server docker container
        run: |
          docker buildx use default
          docker buildx build $ACTION_SERVER_DIR -t action_server:latest -f $ACTION_SERVER_DIR/Dockerfile --build-arg TARGET_IMAGE_REGISTRY=$REPOSITORY --build-arg IMAGE_TAG=$IMAGE_TAG --load
        env:
          ACTION_SERVER_DIR: tests_deployment/integration_tests_tracing_deployment/action_server
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          
      - name: Tracing integration testing - Run docker containers
        run: |
          make run-tracing-integration-containers
        env:
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          TARGET_IMAGE_REGISTRY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Tracing integration testing -  Wait for container startup ‚è≥
        timeout-minutes: 15
        run: |
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5006
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5007
        env:
          CHECK_CONNECTION_SCRIPT: tests_deployment/integration_tests_tracing_deployment/check_connection.sh

      - name: Tracing integration testing - Test Code with Services ü©∫
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
        run: |
          make test-tracing-integration

      - name: Tracing integration testing - Stop docker containers
        run: |
          make stop-tracing-integration-containers

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e # v2.16.1
        with:
          files: report*.xml
          check_name: "Tracing Integration Test Results"
          comment_mode: ${{ (github.event.workflow_run.event == 'pull_request' || github.event_name == 'pull_request') && 'always' || 'off' }}


  metric-integration-test:
    name: Metric Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Read Poetry Version üî¢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

    #   # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
            AWS_REGION: ${{ env.AWS_REGION }}
            AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
            REPOSITORY: ${{ env.REPOSITORY }}
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Metric Integration Testing - Run docker containers
        run: |
          make run-metrics-integration-containers
        env:
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TARGET_IMAGE_REGISTRY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Metric Integration Testing - Wait for container startup ‚è≥
        timeout-minutes: 15
        run: |
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5005
        env:
          CHECK_CONNECTION_SCRIPT: tests_deployment/integration_tests_tracing_deployment/check_connection.sh

      - name: Metric Integration Testing -  Test Code with Services ü©∫
        run: |
          make test-metrics-integration
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
    
      - name: Check otlp-collector container logs
        if: always()
        run: |
          docker compose -f tests_deployment/integration_tests_tracing_deployment/metrics_setup/docker-compose.yml logs otlp-collector

      - name: Check prometheus container logs
        if: always()
        run: |
          docker compose -f tests_deployment/integration_tests_tracing_deployment/metrics_setup/docker-compose.yml logs prometheus
      
      - name: Check rasa-pro-assistent container logs
        if: always()
        run: |
          docker compose -f tests_deployment/integration_tests_tracing_deployment/metrics_setup/docker-compose.yml logs rasa-pro-assistant

      - name: Check action-server container logs
        if: always()
        run: |
          docker compose -f tests_deployment/integration_tests_tracing_deployment/metrics_setup/docker-compose.yml logs prometheus action-server

      - name: Metric Integration Testing - Stop docker containers
        run: |
          make stop-metrics-integration-containers

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e # v2.16.1
        with:
          files: report*.xml
          check_name: "Metric Integration Test Results"
          comment_mode: ${{ (github.event.workflow_run.event == 'pull_request' || github.event_name == 'pull_request') && 'always' || 'off' }}