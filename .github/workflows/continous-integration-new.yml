name: Continuous Integration New

on:
  push:
    branches:
      - main
  pull_request:
    branches:
        - main
        - 3.7.x
        - 3.8.x
        # Skip any PR created by dependabot to avoid permission issues
        - '!dependabot/**'

env:
  AWS_REGION: us-east-1
  REPOSITORY: 329710836760.dkr.ecr.us-east-1.amazonaws.com/rasa-private-dev
  DEFAULT_PYTHON_VERSION: "3.10"
  
permissions:
  checks: write
  id-token: write
  pull-requests: write
  contents: read
  issues: read
  
jobs:
  rasa-private-dev-docker-image:
    name: rasa-private dev docker image
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v3.0.1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: "true"

      # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Set image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
          echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Build base image
        run: |
          docker build . -t rasa-private:base-localdev -f docker/Dockerfile.base --platform=linux/amd64
      
      - name: Build base poetry image
        run: |
          docker build . -t rasa-private:base-poetry-localdev -f docker/Dockerfile.base-poetry --build-arg IMAGE_BASE_NAME=rasa-private --build-arg BASE_IMAGE_HASH=localdev --build-arg POETRY_VERSION=$POETRY_VERSION --platform=linux/amd64
        env:
          POETRY_VERSION: ${{ env.POETRY_VERSION }}

      - name: Build base builder image
        run: |
          docker build . -t rasa-private:base-builder-localdev -f docker/Dockerfile.base-builder --build-arg IMAGE_BASE_NAME=rasa-private --build-arg POETRY_VERSION=localdev --platform=linux/amd64

      - name: Build, tag, and push image to Amazon ECR
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker build . -t $IMAGE_TAG -f Dockerfile --build-arg IMAGE_BASE_NAME=rasa-private --build-arg BASE_IMAGE_HASH=localdev --build-arg BASE_BUILDER_IMAGE_HASH=localdev --platform=linux/amd64
          docker tag $IMAGE_TAG $REPOSITORY:$IMAGE_TAG
          docker push $REPOSITORY:$IMAGE_TAG

  tracing-integration-test:
    name: Tracing Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

        # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Setup buildx
        uses: ./.github/actions/setup-build-x

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
            AWS_REGION: ${{ env.AWS_REGION }}
            AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
            REPOSITORY: ${{ env.REPOSITORY }}
            
      - name: Build action server docker container
        run: |
          docker buildx use default
          docker buildx build $ACTION_SERVER_DIR -t action_server:latest -f $ACTION_SERVER_DIR/Dockerfile --build-arg TARGET_IMAGE_REGISTRY=$REPOSITORY --build-arg IMAGE_TAG=$IMAGE_TAG --load
        env:
          ACTION_SERVER_DIR: tests_deployment/integration_tests_tracing_deployment/action_server
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          
      - name: Tracing integration testing - Run docker containers
        run: |
          make run-tracing-integration-containers
        env:
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          TARGET_IMAGE_REGISTRY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Tracing integration testing -  Wait for container startup ⏳
        timeout-minutes: 15
        run: |
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5006
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5007
        env:
          CHECK_CONNECTION_SCRIPT: tests_deployment/integration_tests_tracing_deployment/check_connection.sh

      - name: Tracing integration testing - Test Code with Services 🩺
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
        run: |
          make test-tracing-integration

      - name: Tracing integration testing - Stop docker containers
        run: |
          make stop-tracing-integration-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Tracing Integration Test Results
          path: report_tracing.xml

  metric-integration-test:
    name: Metric Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

    #   # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
            else
              echo "IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Setup buildx
        uses: ./.github/actions/setup-build-x

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
            IMAGE_TAG: ${{ env.IMAGE_TAG }}
            AWS_REGION: ${{ env.AWS_REGION }}
            AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
            REPOSITORY: ${{ env.REPOSITORY }}

      - name: Metric Integration Testing - Run docker containers
        run: |
          make run-metrics-integration-containers
        env:
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TARGET_IMAGE_REGISTRY: ${{ env.REPOSITORY }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: Metric Integration Testing - Wait for container startup ⏳
        timeout-minutes: 15
        run: |
          bash $CHECK_CONNECTION_SCRIPT http://localhost:5005
        env:
          CHECK_CONNECTION_SCRIPT: tests_deployment/integration_tests_tracing_deployment/check_connection.sh

      - name: Metric Integration Testing -  Test Code with Services 🩺
        run: |
          make test-metrics-integration
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}

      - name: Metric Integration Testing - Stop docker containers
        run: |
          make stop-metrics-integration-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Metric Integration Test Results
          path: report_metric.xml
          
  sequential-integration-test:
      name: Run Sequential Integration Tests
      runs-on: ubuntu-20.04
      timeout-minutes: 60
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

      services:
        postgres:
          image: postgres:13
          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          env:
            # postgres image requires password to be set
            POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          ports:
            # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
            # mapping container ports to the host
            - 5432:5432
      steps:
        - name: Check out code
          uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

        - name: Prepare the job for integration tests
          uses: ./.github/actions/integration-test-prerequisites
          with:
              DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
              POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

        # these integration tests need to be ran in a sequential fashion,
        # due to environment constraints, so we're running them in a single process.
        - name: Test Code with Services 🩺 (sequential)
          env:
            JOBS: 1
            INTEGRATION_TEST_PYTEST_MARKERS: "sequential"
            PYTHONIOENCODING: "utf-8"
          run: |
            make test-integration
        
        - name: Prepare test results
          if: always()
          run: mv report_integration.xml sequential_report_integration.xml
  
        - name: Save Test Results
          if: always()
          uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
          with:
            name: Sequential Integration Test Results
            path: sequential_report_integration.xml

  non-sequential-integration-test:
    name: Run Non-Sequential Integration Tests
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

      postgres:
        image: postgres:13
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          # postgres image requires password to be set
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
          # mapping container ports to the host
          - 5432:5432

      mongodb:
        image: mongodb/mongodb-community-server:6.0.4-ubuntu2204
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Test Code with Services 🩺
        env:
          JOBS: 6
          INTEGRATION_TEST_PYTEST_MARKERS: '"(not sequential) and (not broker) and (not concurrent_lock_store)"'
          PYTHONIOENCODING: "utf-8"
          INTEGRATION_TESTS_STUDIO_LICENSE: ${{ secrets.INTEGRATION_TESTS_STUDIO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
        run: |
          make prepare-tests-ubuntu
          make prepare-spacy
          make test-integration

      - name: Prepare test results
        if: always()
        run: mv report_integration.xml non-sequential_report_integration.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Non-Sequential Integration Test Results
          path: non-sequential_report_integration.xml

  concurrent-lockstore-integration-test:
    name: Run Concurrent LockStore Integration Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      # these integration tests need to be run separately
      - name: Test Code with Services 🩺 (concurrent_lock_store)
        env:
          JOBS: 1
          INTEGRATION_TEST_PYTEST_MARKERS: "concurrent_lock_store"
          PYTHONIOENCODING: "utf-8"
        run: |
          make test-integration
      
      - name: Prepare test results
        if: always()
        run: mv report_integration.xml concurrent-lockstore_report_integration.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Concurrent LockStore Integration Test Results
          path: concurrent-lockstore_report_integration.xml

  test-flaky:
    name: Run Flaky Tests
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/integration-test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Add github workflow problem matchers
        if: matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        run: poetry run pip install -U 'ddtrace<2.0.0'

      - name: Test Code 🔍 (multi-process)
        env:
          JOBS: 6
          PYTHONIOENCODING: "utf-8"
          DD_ENV: test-flaky
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all
        run: |
          make test-flaky
          mv .coverage ${{ github.workspace }}/test-flaky-coverage
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Store coverage reports
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
        with:
          name: test-flaky-coverage
          path: |
            ${{ github.workspace }}/test-flaky-coverage

  publish-test-results:
    runs-on: ubuntu-20.04
    needs: [tracing-integration-test, metric-integration-test,
            sequential-integration-test, non-sequential-integration-test,
            concurrent-lockstore-integration-test]
    if: always()
    steps:
      - name: Download test reports
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 #v4.1.4
        with:
          path: artifacts

      - name: Publish test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e # v2.16.1
        with:
          files: "artifacts/**/*.xml"
          json_test_case_results: true
          check_name: "Integration Test Results"
          comment_mode: ${{ (github.event.workflow_run.event == 'pull_request' || github.event_name == 'pull_request') && 'always' || 'off' }}