name: Continuous Integration

on:
  pull_request:

concurrency:
  group: continous-integration-${{ github.ref }} # branch or tag name
  cancel-in-progress: true

# SECRETS
# - GH_RELEASE_NOTES_TOKEN: personal access token of `rasabot` github account
#                           (login for account in 1pw)
# - SLACK_WEBHOOK_TOKEN: token to post to RasaHQ slack account (in 1password)
# - DOCKERHUB_PASSWORD: password for an account with write access to the rasa
#                       repo on hub.docker.com. used to pull and upload containers
# - RASA_OSS_TELEMETRY_WRITE_KEY: key to write to segment. Used to report telemetry.
#                                 The key will be added to the distributions
# - RASA_OSS_EXCEPTION_WRITE_KEY: key to write to sentry. Used to report exceptions.
#                                 The key will be added to the distributions.
#                                 Key can be found at https://sentry.io/settings/rasahq/projects/rasa-open-source/install/python/
# - SENTRY_AUTH_TOKEN: authentication used to tell Sentry about any new releases
#                      created at https://sentry.io/settings/account/api/auth-tokens/
# - RASA_PRO_LICENSE: license key for Rasa Pro. Used to run tests for Rasa Pro.
# - INTEGRATION_TESTS_STUDIO_LICENSE: license key for Studio. Used in integration tests. Expires in 2034.
# - INTEGRATION_TESTS_PRO_LICENSE: license key for Pro. Used in integration tests. Expires in 2034.

env:
  # needed to fix issues with boto during testing:
  # https://github.com/travis-ci/travis-ci/issues/7940
  BOTO_CONFIG: /dev/null

  IS_TAG_BUILD: ${{ startsWith(github.event.ref, 'refs/tags') }}
  DOCKERHUB_USERNAME: tmbo
  DEFAULT_PYTHON_VERSION: "3.10"
  TARGET_IMAGE_REGISTRY: "europe-west3-docker.pkg.dev/rasa-releases/rasa-docker"
  NODE_VERSION_INSPECTOR_BUILD: 16
  TARGET_IMAGE_REGISTRY: "europe-west3-docker.pkg.dev/rasa-releases/rasa-docker"

  # for wait_for_xx jobs
  WAIT_TIMEOUT_SECS: 3000
  WAIT_INTERVAL_SECS: 60
  RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  POETRY_VERSION: 1.4.2

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-22.04
    outputs:
      # Both of the outputs below are strings but only one exists at any given time
      backend: ${{ steps.changed-files.outputs.backend || steps.run-all.outputs.backend }}
      docker: ${{ steps.changed-files.outputs.docker || steps.run-all.outputs.docker }}
      is_pre_release_version: ${{ steps.rasa_check_version_type.outputs.is_pre_release_version }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        # Run the normal filters if the all-tests-required label is not set
        id: changed-files
        if: contains(github.event.pull_request.labels.*.name, 'status:all-tests-required') == false && github.event_name == 'pull_request'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/change_filters.yml
      - name: Set all filters to true if all tests are required
        # Set all filters to true if the all-tests-required label is set or if we are not in a PR
        # Bypasses all the change filters in change_filters.yml and forces all outputs to true
        id: run-all
        if: contains(github.event.pull_request.labels.*.name, 'status:all-tests-required') || github.event_name != 'pull_request'
        run: |
          echo "backend=true" >> $GITHUB_OUTPUT
          echo "docker=true" >> $GITHUB_OUTPUT

      - name: Check if tag version is a pre release version
        id: rasa_check_version_type
        if: env.IS_TAG_BUILD == 'true'
        run: |
          # Get current tagged Rasa version
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          if [[ "$CURRENT_TAG" =~ ^[0-9.]+$ ]]; then
            echo "is_pre_release_version=false" >> $GITHUB_OUTPUT
          else
            echo "is_pre_release_version=true" >> $GITHUB_OUTPUT
          fi

  quality:
    name: Code Quality
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04
    needs: [changes]

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Inject setuptools into poetry's runtime environment
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry self add setuptools

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
          restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies üì¶
        if: needs.changes.outputs.backend == 'true'
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full

      - name: Checkout target branch to be able to diff
        if: needs.changes.outputs.backend == 'true' && github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}
          echo "DOCSTRING_DIFF_BRANCH=origin/${{ github.base_ref }}" >> $GITHUB_ENV

          # Fetch entire history for current branch so that `make lint-docstrings`
          # can calculate the proper diff between the branches
          git fetch --unshallow origin "${{ github.ref }}"

      - name: Add github workflow problem matchers
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "::add-matcher::.github/matchers/flake8-error-matcher.json"

      - name: Lint Code üéé
        if: needs.changes.outputs.backend == 'true'
        run: |
          # If it's not a pull request, $DOCSTRING_DIFF_BRANCH is unset.
          # This will result in an empty diff, which effictively means that
          # make lint-docstrings will be skipped for other events than `pull_request`
          make lint BRANCH=$DOCSTRING_DIFF_BRANCH

      - name: Check Types üìö
        if: needs.changes.outputs.backend == 'true'
        run: make types

      - name: Lint Changelog Filenames üìù
        if: needs.changes.outputs.backend == 'true' && github.event_name == 'pull_request'
        run: make lint-changelog

      - name: Test CLI üñ•
        if: needs.changes.outputs.backend == 'true'
        # makes sure we catch any dependency error early. they will create strange
        # errors during the docs build, so easier to catch them early on by
        # trying to run the `rasa` command once before the docs build.
        run: poetry run rasa --help

  changelog:
    name: Check for changelog
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout git repository üïù
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Assert release includes all changelog entries
        # check changelog folder only when we create pull request preparing release
        if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'prepare-release') && needs.changes.outputs.is_pre_release_version == 'false'
        working-directory: changelog
        run: |
          # List all unexpected files in changelog/
          UNEXPECTED_FILES=$(ls -A --ignore={"README.md",".gitignore","_template.md.jinja2"})

          # Exit with error if found any unexpected files
          [[ "$UNEXPECTED_FILES" ]] && \
          echo "Found the following unexpected files in changelogs/" && \
          echo "$UNEXPECTED_FILES" && \
          exit 1 || \
          echo "Release includes all changelog entries."

  inspector_build:
    name: Check Inspector Build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        working-directory: rasa/core/channels/inspector

    steps:
    - name: Checkout git repository üïù
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

    - name: Set up Node.js
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 #v4.0.2
      with:
        node-version: ${{ env.NODE_VERSION_INSPECTOR_BUILD }}

    - name: Cache node modules
      uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
      id: yarn-cache
      with:
        path: "**/inspector/node_modules"
        key: ${{ runner.os }}-modules-${{ hashFiles('**/inspector/yarn.lock') }}

    - name: Install dependencies
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: |
        yarn install --frozen-lockfile

    - name: Build Inspector
      run: |
        yarn build

    - name: Store build output
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
      with:
        name: inspector-build
        path: rasa/core/channels/inspector/dist

    - name: Compare build output
      run: |
        if git diff --quiet -- dist; then
          echo "No changes in the Inspector build output."
        else
          echo "Detected changes in the Inspector build output. Please build the Inspector and commit the contents of rasa/core/channels/inspector/dist/ ."
          exit 1
        fi

  test:
    name: Run Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    needs: [changes]
    strategy:
      fail-fast: false
      matrix:
        test:
          - test-cli
          - test-core-featurizers
          - test-policies
          - test-nlu-featurizers
          - test-nlu-predictors
          - test-full-model-training
          - test-other-unit-tests
          - test-performance
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ matrix.python-version }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Inject setuptools into poetry's runtime environment
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry self add setuptools

      - name: Prevent race condition in poetry build
        # More context about race condition during poetry build can be found here:
        # https://github.com/python-poetry/poetry/issues/7611#issuecomment-1747836233
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry config installer.max-workers 1

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      - name: Add github workflow problem matchers
        if: needs.changes.outputs.backend == 'true' && matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        if: needs.changes.outputs.backend == 'true'
        run: poetry run pip install -U 'ddtrace<2.0.0'

      - name: Test Code üîç (multi-process)
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 6
          PYTHONUTF8: 1
          DD_ENV: ${{ matrix.test }}
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all
        run: |
          make ${{ matrix.test }}
          mv .coverage ${{ github.workspace }}/${{ matrix.test }}-coverage
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Store coverage reports
        if: needs.changes.outputs.backend == 'true'
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
        with:
          name: ${{ matrix.test }}-coverage
          path: |
            ${{ github.workspace }}/${{ matrix.test }}-coverage

  test-anonymization:
    name: Run Anonymization Unit Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    needs: [changes]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ matrix.python-version }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Inject setuptools into poetry's runtime environment
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry self add setuptools

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      - name: Install spaCy language model
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry run python -m pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.5.0/en_core_web_lg-3.5.0-py3-none-any.whl

      - name: Add github workflow problem matchers
        if: needs.changes.outputs.backend == 'true' && matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        if: needs.changes.outputs.backend == 'true'
        run: poetry run pip install -U 'ddtrace<2.0.0'

      - name: Test Code üîç (multi-process)
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 6
          PYTHONUTF8: 1
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all
        run: |
          make test-anonymization
          mv .coverage ${{ github.workspace }}/${{ matrix.test }}-coverage
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Store coverage reports
        if: needs.changes.outputs.backend == 'true'
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
        with:
          name: ${{ matrix.test }}-coverage
          path: |
            ${{ github.workspace }}/${{ matrix.test }}-coverage

  test-flaky:
    name: Run Flaky Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    needs: [changes]
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Set up Python ${{ matrix.python-version }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Inject setuptools into poetry's runtime environment
        if: needs.changes.outputs.backend == 'true'
        run: |
          poetry self add setuptools

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      - name: Add github workflow problem matchers
        if: needs.changes.outputs.backend == 'true' && matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        if: needs.changes.outputs.backend == 'true'
        run: poetry run pip install -U 'ddtrace<2.0.0'

      - name: Test Code üîç (multi-process)
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 6
          PYTHONIOENCODING: "utf-8"
          DD_ENV: test-flaky
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all
        run: |
          make test-flaky
          mv .coverage ${{ github.workspace }}/test-flaky-coverage
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Store coverage reports
        if: needs.changes.outputs.backend == 'true'
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 #v3.1.3
        with:
          name: test-flaky-coverage
          path: |
            ${{ github.workspace }}/test-flaky-coverage

  integration_test:
    name: Run Non-Sequential Integration Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    needs: [changes]
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

      postgres:
        image: postgres:13
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          # postgres image requires password to be set
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
          # mapping container ports to the host
          - 5432:5432

      mongodb:
        image: mongodb/mongodb-community-server:6.0.4-ubuntu2204
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu
          make prepare-spacy

      - name: Test Code with Services ü©∫
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 6
          INTEGRATION_TEST_PYTEST_MARKERS: '"(not sequential) and (not broker) and (not concurrent_lock_store)"'
          PYTHONIOENCODING: "utf-8"
          INTEGRATION_TESTS_STUDIO_LICENSE: ${{ secrets.INTEGRATION_TESTS_STUDIO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES }}
        run: |
          make test-integration

  broker_integration_test:
    name: Run Broker Integration Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    needs: [changes]
    env:
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest

    services:
      rabbitmq:
        # see https://github.com/docker-library/healthcheck/blob/master/rabbitmq/docker-healthcheck
        image: healthcheck/rabbitmq
        ports:
          - 5672:5672

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu
          make prepare-spacy

      - name: Run kafka and zookeeper containers for integration testing
        if: needs.changes.outputs.backend == 'true'
        run: |
          docker-compose -f tests_deployment/docker-compose.kafka.yml up -d

      - name: Test Code with Services ü©∫
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 2
          INTEGRATION_TEST_PYTEST_MARKERS: "broker"
          PYTHONIOENCODING: "utf-8"
        run: |
          make test-integration

      - name: Stop kafka and zookeeper containers for integration testing
        if: needs.changes.outputs.backend == 'true'
        run: |
          docker-compose -f tests_deployment/docker-compose.kafka.yml down

  sequential_integration_test:
    name: Run Sequential Integration Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: [changes]
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    services:
      postgres:
        image: postgres:13
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          # postgres image requires password to be set
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
          # mapping container ports to the host
          - 5432:5432

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      # these integration tests need to be ran in a sequential fashion,
      # due to environment constraints, so we're running them in a single process.
      - name: Test Code with Services ü©∫ (sequential)
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 1
          INTEGRATION_TEST_PYTEST_MARKERS: "sequential"
          PYTHONIOENCODING: "utf-8"
        run: |
          make test-integration

  concurrent_lockstore_integration_test:
    name: Run Concurrent LockStore Integration Tests
    if: github.ref_type != 'tag' && startsWith(github.ref, 'refs/heads/prepare-release-pre-') != true
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    needs: [changes]
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

    steps:
      - name: Checkout git repository üïù
        if: needs.changes.outputs.backend == 'true'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} üêç
        if: needs.changes.outputs.backend == 'true'
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version üî¢
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry ü¶Ñ
        if: needs.changes.outputs.backend == 'true'
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        if: needs.changes.outputs.backend == 'true'
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-venv-${{ secrets.POETRY_CACHE_VERSION }}-${{ env.pythonLocation }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

        # Poetry >= 1.1.0b uses virtualenv to create a virtual environment.
        # The virtualenv simply doesn't work on Windows with our setup,
        # that's why we use venv to create virtual environment
      - name: Create virtual environment
        if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')) && needs.changes.outputs.backend == 'true'
        run: python -m venv create .venv

      - name: Set up virtual environment
        if: needs.changes.outputs.backend == 'true'
        # Poetry on Windows cannot pick up the virtual environments directory properly,
        # and it creates a new one every time the pipeline runs.
        # This step solves this problem ‚Äî it tells poetry to always use `.venv` directory inside
        # the project itself, which also makes it easier for us to determine the correct directory
        # that needs to be cached.
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies (Linux) üì¶
        if: needs.changes.outputs.backend == 'true'
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      # these integration tests need to be run separately
      - name: Test Code with Services ü©∫ (concurrent_lock_store)
        if: needs.changes.outputs.backend == 'true'
        env:
          JOBS: 1
          INTEGRATION_TEST_PYTEST_MARKERS: "concurrent_lock_store"
          PYTHONIOENCODING: "utf-8"
        run: |
          make test-integration
