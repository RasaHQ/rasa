name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: continous-integration-${{ github.ref }} # branch or tag name
  cancel-in-progress: true

# SECRETS
# - RASA_TELEMETRY_WRITE_KEY: key to write to segment. Used to report telemetry.
#                                 The key will be added to the distributions
#                      created at https://sentry.io/settings/account/api/auth-tokens/
# - RASA_PRO_LICENSE: license key for Rasa Pro. Used to run tests for Rasa Pro.
# - INTEGRATION_TESTS_STUDIO_LICENSE: license key for Studio. Used in integration tests. Expires in 2034.
# - INTEGRATION_TESTS_PRO_LICENSE: license key for Pro. Used in integration tests. Expires in 2034.

env:
  AWS_REGION: us-east-1
  RASA_PRO_DEV_REPOSITORY: 329710836760.dkr.ecr.us-east-1.amazonaws.com/rasa-private-dev
  RASA_SDK_DEV_REPOSITORY: 329710836760.dkr.ecr.us-east-1.amazonaws.com/rasa-sdk-dev
  DEFAULT_PYTHON_VERSION: "3.10"
  NODE_VERSION_INSPECTOR_BUILD: 16

permissions:
  checks: write
  id-token: write
  pull-requests: write
  contents: read
  issues: read

jobs:
  check-poetry-lock-is-up-to-date:
    name: check poetry lock is up to date
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
          DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
          POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Check poetry lock
        run: |
          poetry check --lock
          if grep 'Error: pyproject.toml changed significantly since poetry.lock was last generated' .output; then exit 1; fi


  quality:
    name: Code Quality
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job
        uses: ./.github/actions/test-prerequisites
        with:
          PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
          POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies 📦
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full

      - name: Checkout target branch to be able to diff
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}
          echo "DOCSTRING_DIFF_BRANCH=origin/${{ github.base_ref }}" >> $GITHUB_ENV

          # Fetch entire history for current branch so that `make lint-docstrings`
          # can calculate the proper diff between the branches
          git fetch --unshallow origin "${{ github.ref }}"

      - name: Add github workflow problem matchers
        run: |
          echo "::add-matcher::.github/matchers/flake8-error-matcher.json"

      - name: Lint Code 🎎
        run: |
          # If it's not a pull request, $DOCSTRING_DIFF_BRANCH is unset.
          # This will result in an empty diff, which effictively means that
          # make lint-docstrings will be skipped for other events than `pull_request`
          make lint BRANCH=$DOCSTRING_DIFF_BRANCH

      - name: Check Types 📚
        run: make types

      - name: Lint Changelog Filenames 📝
        if: github.event_name == 'pull_request'
        run: make lint-changelog


  rasa-private-dev-docker-image:
    name: rasa-private dev docker image
    runs-on: ubuntu-22.04
    env:
      PLATFORM: linux/amd64

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v3.0.1
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
        with:
          mask-password: "true"

      - name: Set image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
            echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Build base image
        run: |
          PLATFORM=${{ env.PLATFORM }} make build-docker-base

      - name: Build base builder image
        run: |
          BASE_IMAGE_HASH=localdev \
          PLATFORM=${{ env.PLATFORM }} \
          make build-docker-builder

      - name: Build Rasa Dependencies Image
        run: |
          BASE_BUILDER_IMAGE_HASH=localdev \
          POETRY_VERSION=$POETRY_VERSION \
          PLATFORM=${{ env.PLATFORM }} \
          make build-docker-rasa-deps

      - name: Build, tag, and push image to Amazon ECR
        run: |
          RASA_REPOSITORY=${{ env.RASA_PRO_DEV_REPOSITORY }} \
          RASA_IMAGE_TAG=${{ env.RASA_IMAGE_TAG }} \
          BASE_IMAGE_HASH=localdev \
          RASA_DEPS_IMAGE_HASH=localdev \
          PLATFORM=${{ env.PLATFORM }} \
          make build-docker-rasa-image
          docker push ${{ env.RASA_PRO_DEV_REPOSITORY }}:${{ env.RASA_IMAGE_TAG }}

  check_inspector_build:
    name: Check Inspector Build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
        working-directory: rasa/core/channels/inspector

    steps:
    - name: Check out code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    - name: Set up Node.js
      uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 #v4.0.2
      with:
        node-version: ${{ env.NODE_VERSION_INSPECTOR_BUILD }}

    - name: Cache node modules
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 #v4.0.2
      id: yarn-cache
      with:
        path: "**/inspector/node_modules"
        key: ${{ runner.os }}-modules-${{ hashFiles('**/inspector/yarn.lock') }}

    - name: Install dependencies
      if: steps.yarn-cache.outputs.cache-hit != 'true'
      run: |
        yarn install --frozen-lockfile

    - name: Build Inspector
      run: |
        yarn build

    - name: Store build output
      uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
      with:
        name: inspector-build
        path: rasa/core/channels/inspector/dist

    - name: Compare build output
      run: |
        if git diff --quiet -- dist; then
          echo "No changes in the Inspector build output."
        else
          echo "Detected changes in the Inspector build output. Please build the Inspector and commit the contents of rasa/core/channels/inspector/dist/ ."
          exit 1
        fi

  tracing-integration-test:
    name: Tracing Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
            echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        shell: bash
        run: |
          make install

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}

      - name: Pull rasa-sdk dev image
        uses: ./.github/actions/pull-from-ecr
        with:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          IMAGE_TAG: latest
          REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}

      - name: Tracing integration testing - Run docker containers
        env:
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_SDK_REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}
        run: |
          make run-tracing-integration-containers

      - name: Tracing integration testing - Test Code with Services 🩺
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
        run: |
          make test-tracing-integration

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-tracing-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/integration_tests_tracing_deployment/docker-compose.yml

      - name: Tracing integration testing - Stop docker containers
        if: always()
        run: |
          make stop-tracing-integration-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Tracing Integration Test Results
          path: integration-results-tracing.xml

  metric-integration-test:
    name: Metric Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

    #   # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
            echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        shell: bash
        run: |
          make install

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}

      - name: Metric Integration Testing - Run docker containers
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_SDK_REPOSITORY: rasa/rasa-sdk
          RASA_SDK_IMAGE_TAG: latest
        run: |
          make run-metrics-integration-containers

      - name: Metric Integration Testing -  Test Code with Services 🩺
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
        run: |
          make test-metrics-integration

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-metric-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/integration_tests_metrics_setup/docker-compose.yml

      - name: Metric Integration Testing - Stop docker containers
        run: |
          make stop-metrics-integration-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Metric Integration Test Results
          path: integration-results-metric.xml

  custom-action-integration-test-with-nlu-bot:
    name: Custom Action Integration Tests With NLU bot
    needs: rasa-private-dev-docker-image
    env:
      RASA_SDK_IMAGE_TAG: latest
    runs-on: ubuntu-22.04-4core

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Configure image tag
        run: |
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
            else
              echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
            DEFAULT_PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        run: |
          make install
        shell: bash

      - name: Docker version
        run: docker --version && docker compose version

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
            IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
            AWS_REGION: ${{ env.AWS_REGION }}
            AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
            REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}

      - name: Custom Actions Integration Testing - Run docker containers
        run: |
          make run-action-server-nlu-containers
        env:
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_SDK_REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}
          RASA_SDK_IMAGE_TAG: ${{ env.RASA_SDK_IMAGE_TAG }}

      - name: Custom Actions Testing - Test Code with Services 🩺
        run: |
          make test-custom-action-integration-with-nlu-bot
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-custom-action-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/integration_tests_custom_action_server/docker-compose.yml
          ENV_FILE_PATH: tests_deployment/integration_tests_custom_action_server/env-file
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_SDK_REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}
          RASA_SDK_IMAGE_TAG: ${{ env.RASA_SDK_IMAGE_TAG }}
          BOT_PATH: "./tests_deployment/integration_tests_custom_action_server/simple_nlu_bot"

      - name: Custom Action Integration Testing - Stop docker containers
        if: always()
        run: |
          make stop-action-server-nlu-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Custom Action Integration Test Results For NLU bot
          path: integration-results-custom-actions-with-nlu-bot-results.xml

  custom-action-integration-test-with-calm-bot:
    name: Custom Action Integration Tests With CALM bot
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    env:
      RASA_SDK_IMAGE_TAG: latest
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      #   # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
            echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
          PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
          POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        run: |
          make install
        shell: bash

      - name: Docker version
        run: docker --version && docker compose version

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
          IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}

      - name: Custom Actions Integration Testing - Run docker containers
        run: |
          make run-action-server-calm-containers
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_SDK_REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}
          RASA_SDK_IMAGE_TAG: ${{ env.RASA_SDK_IMAGE_TAG }}

      - name: Custom Actions Testing -  Test Code with Services 🩺
        run: |
          make test-custom-action-integration-with-calm-bot
        env:
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-custom-action-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/integration_tests_custom_action_server/docker-compose.yml
          ENV_FILE_PATH: tests_deployment/integration_tests_custom_action_server/env-file
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          RASA_SDK_REPOSITORY: ${{ env.RASA_SDK_DEV_REPOSITORY }}
          RASA_SDK_IMAGE_TAG: ${{ env.RASA_SDK_IMAGE_TAG }}
          BOT_PATH: "./tests_deployment/integration_tests_custom_action_server/simple_calm_bot"

      - name: Custom Action Integration Testing - Stop docker containers
        if: always()
        run: |
          make stop-action-server-calm-containers

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Custom Action Integration Test Results For CALM Bot
          path: integration-results-custom-actions-with-calm-bot-results.xml

  enterprise-search-integration-tests:
    name: Run Enterprise Search Integration Tests
    needs: rasa-private-dev-docker-image
    runs-on: ubuntu-22.04-4core
    env:
      RASA_SDK_IMAGE_TAG: latest
    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      #   # Tag in format: pr_number-shortSHA or branch_name-shortSHA
      - name: Configure image tag
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            echo "RASA_IMAGE_TAG=pr${{ github.event.number }}-$(git rev-parse --short $(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha))" >> $GITHUB_ENV
          else
            echo "RASA_IMAGE_TAG=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]')-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi

      - name: Set up Python ${{ inputs.PYTHON_VERSION }} 🐍
        id: setup-python
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ inputs.PYTHON_VERSION }}

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      # Install & configure poetry
      - name: Install Poetry ${{ env.POETRY_VERSION }}
        uses: snok/install-poetry@93ada01c735cc8a383ce0ce2ae205a21c415379b # v1.3.4
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install Dependencies (Linux) 📦
        run: |
          make install
        shell: bash

      - name: Pull rasa-private dev image
        uses: ./.github/actions/pull-from-ecr
        with:
          IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ARN_ROLE_TO_ASSUME: ${{ secrets.AWS_ASSUME_ROLE_SESSION_TOKEN }}
          REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}

      - name: Enterprise Search Integration Testing - Train bot Faiss
        run: |
          make train-rasa-calm-bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          CONFIG: "config-faiss.yml"
          ENDPOINTS: "endpoints-faiss.yml"
          MODEL_NAME: "model-faiss"

      - name: Enterprise Search Integration Testing - Train bot Milvus
        run: |
          make train-rasa-calm-bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          CONFIG: "config-milvus.yml"
          ENDPOINTS: "endpoints-milvus.yml"
          MODEL_NAME: "model-milvus"

      - name: Enterprise Search Integration Testing - Train bot for Qdrant
        run: |
          make train-rasa-calm-bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          CONFIG: "config-qdrant.yml"
          ENDPOINTS: "endpoints-qdrant.yml"
          MODEL_NAME: "model-qdrant"

      - name: Enterprise Search Integration Testing - Run docker containers
        run: |
          make run-rasa-calm-demo-test-containers
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          RASA_REPOSITORY: ${{ env.RASA_PRO_DEV_REPOSITORY }}
          RASA_IMAGE_TAG: ${{ env.RASA_IMAGE_TAG }}
          CONFIG: "config-qdrant.yml"
          ENDPOINTS: "endpoints-qdrant.yml"
          DOCKER_COMPOSE: "docker-compose.yml"

      - name: Install additional dependencies for Docs ingestion
        run: |
          pip install unstructured==0.12.2 langchain==0.0.329 qdrant-client==1.9.1 pymilvus==2.3.5 openai==0.28.1 tiktoken==0.4.0

      - name: Run vector store setup for Qdrant
        run: |
          python tests_deployment/integration_tests_enterprise_search/ingest.py -c tests_deployment/integration_tests_enterprise_search/qdrant_config.yaml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run vector store setup for Milvus
        run: |
          python tests_deployment/integration_tests_enterprise_search/ingest.py -c tests_deployment/integration_tests_enterprise_search/milvus_config.yaml
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Enterprise Search Integration Testing -  Test Code with Services 🩺
        run: |
          make test-enterprise-search-integration-with-calm-bot
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PYTHONIOENCODING: "utf-8"
          RASA_TELEMETRY_WRITE_KEY: ${{ secrets.SEGMENT_WRITE_DEV_KEY }}
          TEST_NAME: "test_search_with_vector_stores.py"

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-enterprise-search-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/integration_tests_enterprise_search/docker-compose.yml

      - name: Enterprise Search Integration Testing - Stop docker containers
        if: always()
        run: |
          make stop-rasa-calm-demo-bot-test-containers
        env:
          DOCKER_COMPOSE: "docker-compose.yml"

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Enterprise Search Integration Test Results
          path: integration-results-enterprise-search.xml

  sequential-integration-test:
      name: Run Sequential Integration Tests
      runs-on: ubuntu-20.04
      timeout-minutes: 60
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

      services:
        postgres:
          image: postgres:13
          # Set health checks to wait until postgres has started
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          env:
            # postgres image requires password to be set
            POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          ports:
            # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
            # mapping container ports to the host
            - 5432:5432
      steps:
        - name: Check out code
          uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

        - name: Prepare the job for integration tests
          uses: ./.github/actions/test-prerequisites
          with:
              PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
              POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

        - name: Install Dependencies (Linux) 📦
          run: |
            make install
          shell: bash

        # these integration tests need to be ran in a sequential fashion,
        # due to environment constraints, so we're running them in a single process.
        - name: Test Code with Services 🩺 (sequential)
          env:
            JOBS: 1
            INTEGRATION_TEST_PYTEST_MARKERS: "sequential"
            PYTHONIOENCODING: "utf-8"
          run: |
            make test-integration

        - name: Prepare test results
          if: always()
          run: mv report_integration.xml integration-results-sequential.xml

        - name: Save Test Results
          if: always()
          uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
          with:
            name: Sequential Integration Test Results
            path: integration-results-sequential.xml

  non-sequential-integration-test:
    name: Run Non-Sequential Integration Tests
    runs-on: ubuntu-22.04-8core
    timeout-minutes: 60
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

      postgres:
        image: postgres:13
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          # postgres image requires password to be set
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          # FIXME: cannot use ${{ env.POSTGRES_PORT }} here
          # mapping container ports to the host
          - 5432:5432

      mongodb:
        image: mongodb/mongodb-community-server:6.0.4-ubuntu2204
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        run: |
          make install
        shell: bash

      - name: Test Code with Services 🩺
        env:
          JOBS: 6
          INTEGRATION_TEST_PYTEST_MARKERS: '"(not sequential) and (not broker) and (not concurrent_lock_store)"'
          PYTHONIOENCODING: "utf-8"
          INTEGRATION_TESTS_STUDIO_LICENSE: ${{ secrets.INTEGRATION_TESTS_STUDIO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE }}
          INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES: ${{ secrets.INTEGRATION_TESTS_PRO_LICENSE_ALL_FEATURES }}
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
        run: |
          make prepare-tests-ubuntu
          make prepare-spacy
          make test-integration

      - name: Prepare test results
        if: always()
        run: mv report_integration.xml integration-results-non-sequential.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Non-Sequential Integration Test Results
          path: integration-results-non-sequential.xml

  concurrent-lockstore-integration-test:
    name: Run Concurrent LockStore Integration Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    env:
      REDIS_HOST: localhost
      REDIS_PORT: 6379

    services:
      redis:
        image: redis:6
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # FIXME: cannot use ${{ env.REDIS_PORT }} here
          # mapping container ports to the host
          - 6379:6379

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        run: |
          make install
        shell: bash

      # these integration tests need to be run separately
      - name: Test Code with Services 🩺 (concurrent_lock_store)
        env:
          JOBS: 1
          INTEGRATION_TEST_PYTEST_MARKERS: "concurrent_lock_store"
          PYTHONIOENCODING: "utf-8"
        run: |
          make test-integration

      - name: Prepare test results
        if: always()
        run: mv report_integration.xml integration-results-concurrent-lockstore.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: Concurrent LockStore Integration Test Results
          path: integration-results-concurrent-lockstore.xml

  broker_integration_test:
    name: Run Broker Integration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    env:
      RABBITMQ_HOST: localhost
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest

    services:
      rabbitmq:
        # see https://github.com/docker-library/healthcheck/blob/master/rabbitmq/docker-healthcheck
        image: healthcheck/rabbitmq
        ports:
          - 5672:5672

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for integration tests
        uses: ./.github/actions/test-prerequisites
        with:
          PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
          POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies Full (Linux) 📦
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu
          make prepare-spacy

      - name: Run kafka and zookeeper containers for integration testing
        run: |
          docker compose -f tests_deployment/docker-compose.kafka.yml up -d

      - name: Test Code with Services 🩺(broker_integration_test)
        env:
          JOBS: 1
          INTEGRATION_TEST_PYTEST_MARKERS: "broker"
          PYTHONIOENCODING: "utf-8"
        run: |
            make test-integration

      - name: Show container logs
        if: always()
        uses: ./.github/actions/debug-broker-tests
        with:
          COMPOSE_FILE_PATH: tests_deployment/docker-compose.kafka.yml

      - name: Prepare test results
        if: always()
        run: mv report_integration.xml integration-results-broker-integration.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
            name: Broker Integration Test Results
            path: integration-results-broker-integration.xml

      - name: Stop kafka and zookeeper containers for integration testing
        run: |
          docker compose -f tests_deployment/docker-compose.kafka.yml down

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-22.04-4core
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        test:
          - test-cli
          - test-core-featurizers
          - test-policies
          - test-nlu-featurizers
          - test-nlu-predictors
          - test-full-model-training
          - test-other-unit-tests
          - test-performance
          - test-flaky
        python-version: [3.9, "3.10"]

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for unit tests
        uses: ./.github/actions/test-prerequisites
        with:
            PYTHON_VERSION: ${{ matrix.python-version }}
            POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      - name: Add github workflow problem matchers
        if: matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        run: poetry run pip install -U 'ddtrace==2.10.5'

      - name: Test Code 🔍 (multi-process)
        env:
          JOBS: 6
          PYTHONUTF8: 1
          DD_ENV: ${{ matrix.test }}
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all --junitxml=unit-tests-results.xml
          RASA_PRO_LICENSE: ${{ secrets.RASA_PRO_LICENSE }}
          BLOCKED_LICENSE: ${{ secrets.BLOCKED_LICENSE }}
          CHAMPION_LICENSE: ${{ secrets.CHAMPION_LICENSE }}
          CHAMPION_SERVER_INTERNAL_LICENSE: ${{ secrets.CHAMPION_SERVER_INTERNAL_LICENSE }}
          CHAMPION_SERVER_LIMITED_LICENSE: ${{ secrets.CHAMPION_SERVER_LIMITED_LICENSE }}
          EXPIRED_LICENSE: ${{ secrets.EXPIRED_LICENSE }}
          IMMATURE_LICENSE: ${{ secrets.IMMATURE_LICENSE }}
          INVALID_SCHEMA_LICENSE: ${{ secrets.INVALID_SCHEMA_LICENSE }}
          INVALID_SIGNATURE_LICENSE: ${{ secrets.INVALID_SIGNATURE_LICENSE }}
          NON_JWT_LICENSE: ${{ secrets.NON_JWT_LICENSE }}
          UNSCOPED_LICENSE: ${{ secrets.UNSCOPED_LICENSE }}
          VALID_LICENSE: ${{ secrets.VALID_LICENSE }}
        run: |
          make ${{ matrix.test }}
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Prepare test results
        if: always()
        run: mv unit-tests-results.xml ${{ github.workspace }}/unit-tests-results-${{ matrix.test }}-python-${{ matrix.python-version }}.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
          name: unit-tests-results-${{ matrix.test }}-python-${{ matrix.python-version }}
          path: |
            ${{ github.workspace }}/unit-tests-results-${{ matrix.test }}-python-${{ matrix.python-version }}.xml

  test-anonymization:
    name: Run Anonymization Unit Tests
    runs-on: ubuntu-22.04-4core
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.9, "3.10"]

    steps:
      - name: Check out code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Prepare the job for unit tests
        uses: ./.github/actions/test-prerequisites
        with:
          PYTHON_VERSION: ${{ matrix.python-version }}
          POETRY_CACHE_VERSION: ${{ secrets.POETRY_CACHE_VERSION }}

      - name: Install Dependencies (Linux) 📦
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full | tee .output
          if grep 'The lock file is not up to date' .output; then exit 1; fi
          make prepare-tests-ubuntu

      - name: Install spaCy language model
        run: |
          poetry run python -m pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.7.1/en_core_web_lg-3.7.1-py3-none-any.whl

      - name: Add github workflow problem matchers
        if: matrix.python-version == 3.7
        # only annotate based on test runs on ubuntu: otherwise
        # all errors will be duplicated for each python / os combination
        # therefore, we only enable for the one where most tests are run
        # (tests will still run in other envs, they will just not create annotations)
        run: pip install pytest-github-actions-annotate-failures

      - name: Install ddtrace on Linux
        run: poetry run pip install -U 'ddtrace==2.10.5'

      - name: Test Code 🔍 (multi-process)
        env:
          JOBS: 6
          PYTHONUTF8: 1
          DD_SERVICE: rasa
          DD_ARGS: --ddtrace --ddtrace-patch-all --junitxml=unit-tests-results.xml
        run: |
          make test-anonymization
        shell: bash # bash shell is a way to make code run for both Linux and Windows

      - name: Prepare test results
        if: always()
        run: mv unit-tests-results.xml ${{ github.workspace }}/unit-tests-results-test-anonymization-python-${{ matrix.python-version }}.xml

      - name: Save Test Results
        if: always()
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 #v4.3.1
        with:
            name: unit-tests-results-test-anonymization-python-${{ matrix.python-version }}
            path: |
              ${{ github.workspace }}/unit-tests-results-test-anonymization-python-${{ matrix.python-version }}.xml

  publish-test-results:
    runs-on: ubuntu-20.04
    needs: [ tracing-integration-test,
             metric-integration-test,
             enterprise-search-integration-tests,
             custom-action-integration-test-with-nlu-bot,
             custom-action-integration-test-with-calm-bot,
             sequential-integration-test,
             non-sequential-integration-test,
             concurrent-lockstore-integration-test,
             broker_integration_test,
             unit-test, test-anonymization ]
    if: always()
    steps:
      - name: Download test reports
        uses: actions/download-artifact@c850b930e6ba138125429b7e5c93fc707a7f8427 #v4.1.4
        with:
          path: artifacts

      - name: Publish integration test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e # v2.16.1
        with:
          files: "artifacts/**/integration-results-*.xml"
          check_name: "Integration Test Results"

      - name: Publish unit-test results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e # v2.16.1
        with:
          files: "artifacts/**/unit-tests-results-*.xml"
          check_name: "Unit Test Results"
