name: Release workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
      rasa-sdk-version:
        description: 'Rasa SDK version to use'
        required: true
  pull_request:
    branches:
      - main
      - '[0-9]+.[0-9]+.x'
    types: [closed]

env:
    GITHUB_TOKEN: ${{ secrets.RASABOT_GITHUB_TOKEN }}
    INPUT_VERSION: ${{ github.event.inputs.version }}
    INPUT_RASA_SDK_VERSION: ${{ github.event.inputs['rasa-sdk-version'] }}
    COMMIT_EMAIL: sara-tagger@users.noreply.github.com
    DEFAULT_PYTHON_VERSION: "3.10"

jobs:
  prepare-the-release:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          fetch-depth: 0

      - name: Minor Release Check
        id: minor_release
        run: |
          version="$INPUT_VERSION"
          
          # Check if version is in format number.number.number
          if ! [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. It should be in format 'number.number.number'."
            exit 1
          fi

          # Extract the third number
          IFS='.' read -r -a version_parts <<< "$version"
          third_number="${version_parts[2]}"

          # Check if it's a minor release
          if [ "$third_number" -eq 0 ]; then
            echo "Minor release detected."
            echo "is_minor=true" >> $GITHUB_ENV
          else
            echo "Not a minor release. Skipping branch creation."
            echo "is_minor=false" >> $GITHUB_ENV
          fi

      - name: Create and Push New Release Branch
        if: env.is_minor == 'true'
        run: |
          version="$INPUT_VERSION"
          IFS='.' read -r -a version_parts <<< "$version"
          release_branch="${version_parts[0]}.${version_parts[1]}.x"

          git fetch origin
          git checkout origin/main
          git checkout -b $release_branch
          git push origin $release_branch

      - name: Check-out Release Branch
        run: |
          version="$INPUT_VERSION"
          IFS='.' read -r -a version_parts <<< "$version"
          release_branch="${version_parts[0]}.${version_parts[1]}.x"
          
          git checkout $release_branch
          git branch

      - name: Check Rasa SDK Version
        id: check_rasa_sdk_version
        run: |
          input_rasa_sdk_version="$INPUT_RASA_SDK_VERSION"

          # Extract the full rasa-sdk version from pyproject.toml
          rasa_sdk=$(awk -F'"' '/\[tool.poetry.dependencies.rasa-sdk\]/{flag=1;next}/\[/{flag=0}flag && /version/ {print $2}' pyproject.toml)

          # Compare the full input version and the poetry version
          if [ "$input_rasa_sdk_version" != "$rasa_sdk" ]; then
            echo "Version mismatch: Input version of rasa-sdk ($input_rasa_sdk_version) does not match rasa-sdk version ($rasa_sdk) in pyproject.toml."
            echo "update_required=true" >> $GITHUB_ENV
          else
            echo "Version match: Input version of rasa-sdk ($input_rasa_sdk_version) matches rasa-sdk ($rasa_sdk) version in pyproject.toml."
            echo "update_required=false" >> $GITHUB_ENV
          fi
      
      - name: Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}
      
      - name: Update Rasa SDK Version
        if: env.update_required == 'true'
        run: |
          input_rasa_sdk_version="$INPUT_RASA_SDK_VERSION"

          # Update the rasa-sdk version in pyproject.toml
          awk -v new_version="$input_rasa_sdk_version" 'BEGIN{flag=0} /\[tool.poetry.dependencies.rasa-sdk\]/{flag=1} flag && /version/{$0="version = \"" new_version "\""} 1' pyproject.toml > pyproject.tmp && mv pyproject.tmp pyproject.toml

          cat pyproject.toml

          # Update the lock file without upgrading dependencies
          poetry lock --no-update

          # Commit the changes
          git config user.name "rasabot"
          git config user.email "rasabot@rasa.com"
          git add pyproject.toml poetry.lock
          git commit -m "bump rasa-sdk dependency"

    #   - name: Prepare the release
    #     run: poetry run python scripts/release.py prepare --next_version ${{ github.event.inputs.version }}
  
  if_merged_tag_release:
    if: startsWith(github.head_ref, 'prepare-release-') && github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout git repository üïù
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          token: ${{ secrets.RELEASE_TAGGER_PAT }}

      - name: Setup Python Environment
        uses: ./.github/actions/setup-python-env
        with:
            PYTHON_VERSION: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Load Poetry Cached Libraries ‚¨á
        id: cache-poetry
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
          restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

      - name: Create virtual environment
        if: steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: python -m venv create .venv

      - name: Set up virtual environment
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies üì¶
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install-full

      - name: Configure git
        run: |
          git config --global user.email ${{ env.COMMIT_EMAIL }}
          git config --global user.name "Github Actions"

      - name: Tag Release
        run: make tag-release-auto